#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINQ02
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Cinema")]
	public partial class DBCordDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAir(Air instance);
    partial void UpdateAir(Air instance);
    partial void DeleteAir(Air instance);
    partial void InsertMovie(Movie instance);
    partial void UpdateMovie(Movie instance);
    partial void DeleteMovie(Movie instance);
    partial void InsertTheater(Theater instance);
    partial void UpdateTheater(Theater instance);
    partial void DeleteTheater(Theater instance);
    #endregion
		
		public DBCordDataContext() : 
				base(global::LINQ02.Properties.Settings.Default.CinemaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBCordDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBCordDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBCordDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBCordDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Air> Airs
		{
			get
			{
				return this.GetTable<Air>();
			}
		}
		
		public System.Data.Linq.Table<Movie> Movies
		{
			get
			{
				return this.GetTable<Movie>();
			}
		}
		
		public System.Data.Linq.Table<Theater> Theaters
		{
			get
			{
				return this.GetTable<Theater>();
			}
		}
		
		public System.Data.Linq.Table<AirOutput> AirOutputs
		{
			get
			{
				return this.GetTable<AirOutput>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SP_Insert_Movie")]
		public int SP_Insert_Movie([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string mname)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), mname);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Air")]
	public partial class Air : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _airID;
		
		private int _airMovID;
		
		private int _airTheID;
		
		private System.DateTime _airTime;
		
		private EntityRef<Movie> _Movie;
		
		private EntityRef<Theater> _Theater;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnairIDChanging(int value);
    partial void OnairIDChanged();
    partial void OnairMovIDChanging(int value);
    partial void OnairMovIDChanged();
    partial void OnairTheIDChanging(int value);
    partial void OnairTheIDChanged();
    partial void OnairTimeChanging(System.DateTime value);
    partial void OnairTimeChanged();
    #endregion
		
		public Air()
		{
			this._Movie = default(EntityRef<Movie>);
			this._Theater = default(EntityRef<Theater>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_airID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int airID
		{
			get
			{
				return this._airID;
			}
			set
			{
				if ((this._airID != value))
				{
					this.OnairIDChanging(value);
					this.SendPropertyChanging();
					this._airID = value;
					this.SendPropertyChanged("airID");
					this.OnairIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_airMovID", DbType="Int NOT NULL")]
		public int airMovID
		{
			get
			{
				return this._airMovID;
			}
			set
			{
				if ((this._airMovID != value))
				{
					if (this._Movie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnairMovIDChanging(value);
					this.SendPropertyChanging();
					this._airMovID = value;
					this.SendPropertyChanged("airMovID");
					this.OnairMovIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_airTheID", DbType="Int NOT NULL")]
		public int airTheID
		{
			get
			{
				return this._airTheID;
			}
			set
			{
				if ((this._airTheID != value))
				{
					if (this._Theater.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnairTheIDChanging(value);
					this.SendPropertyChanging();
					this._airTheID = value;
					this.SendPropertyChanged("airTheID");
					this.OnairTheIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_airTime", DbType="DateTime NOT NULL")]
		public System.DateTime airTime
		{
			get
			{
				return this._airTime;
			}
			set
			{
				if ((this._airTime != value))
				{
					this.OnairTimeChanging(value);
					this.SendPropertyChanging();
					this._airTime = value;
					this.SendPropertyChanged("airTime");
					this.OnairTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Air", Storage="_Movie", ThisKey="airMovID", OtherKey="movID", IsForeignKey=true)]
		public Movie Movie
		{
			get
			{
				return this._Movie.Entity;
			}
			set
			{
				Movie previousValue = this._Movie.Entity;
				if (((previousValue != value) 
							|| (this._Movie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movie.Entity = null;
						previousValue.Airs.Remove(this);
					}
					this._Movie.Entity = value;
					if ((value != null))
					{
						value.Airs.Add(this);
						this._airMovID = value.movID;
					}
					else
					{
						this._airMovID = default(int);
					}
					this.SendPropertyChanged("Movie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theater_Air", Storage="_Theater", ThisKey="airTheID", OtherKey="theID", IsForeignKey=true)]
		public Theater Theater
		{
			get
			{
				return this._Theater.Entity;
			}
			set
			{
				Theater previousValue = this._Theater.Entity;
				if (((previousValue != value) 
							|| (this._Theater.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Theater.Entity = null;
						previousValue.Airs.Remove(this);
					}
					this._Theater.Entity = value;
					if ((value != null))
					{
						value.Airs.Add(this);
						this._airTheID = value.theID;
					}
					else
					{
						this._airTheID = default(int);
					}
					this.SendPropertyChanged("Theater");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movie")]
	public partial class Movie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _movID;
		
		private string _movName;
		
		private EntitySet<Air> _Airs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmovIDChanging(int value);
    partial void OnmovIDChanged();
    partial void OnmovNameChanging(string value);
    partial void OnmovNameChanged();
    #endregion
		
		public Movie()
		{
			this._Airs = new EntitySet<Air>(new Action<Air>(this.attach_Airs), new Action<Air>(this.detach_Airs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int movID
		{
			get
			{
				return this._movID;
			}
			set
			{
				if ((this._movID != value))
				{
					this.OnmovIDChanging(value);
					this.SendPropertyChanging();
					this._movID = value;
					this.SendPropertyChanged("movID");
					this.OnmovIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string movName
		{
			get
			{
				return this._movName;
			}
			set
			{
				if ((this._movName != value))
				{
					this.OnmovNameChanging(value);
					this.SendPropertyChanging();
					this._movName = value;
					this.SendPropertyChanged("movName");
					this.OnmovNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movie_Air", Storage="_Airs", ThisKey="movID", OtherKey="airMovID")]
		public EntitySet<Air> Airs
		{
			get
			{
				return this._Airs;
			}
			set
			{
				this._Airs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Airs(Air entity)
		{
			this.SendPropertyChanging();
			entity.Movie = this;
		}
		
		private void detach_Airs(Air entity)
		{
			this.SendPropertyChanging();
			entity.Movie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Theater")]
	public partial class Theater : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _theID;
		
		private string _theName;
		
		private EntitySet<Air> _Airs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntheIDChanging(int value);
    partial void OntheIDChanged();
    partial void OntheNameChanging(string value);
    partial void OntheNameChanged();
    #endregion
		
		public Theater()
		{
			this._Airs = new EntitySet<Air>(new Action<Air>(this.attach_Airs), new Action<Air>(this.detach_Airs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_theID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int theID
		{
			get
			{
				return this._theID;
			}
			set
			{
				if ((this._theID != value))
				{
					this.OntheIDChanging(value);
					this.SendPropertyChanging();
					this._theID = value;
					this.SendPropertyChanged("theID");
					this.OntheIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_theName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string theName
		{
			get
			{
				return this._theName;
			}
			set
			{
				if ((this._theName != value))
				{
					this.OntheNameChanging(value);
					this.SendPropertyChanging();
					this._theName = value;
					this.SendPropertyChanged("theName");
					this.OntheNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theater_Air", Storage="_Airs", ThisKey="theID", OtherKey="airTheID")]
		public EntitySet<Air> Airs
		{
			get
			{
				return this._Airs;
			}
			set
			{
				this._Airs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Airs(Air entity)
		{
			this.SendPropertyChanging();
			entity.Theater = this;
		}
		
		private void detach_Airs(Air entity)
		{
			this.SendPropertyChanging();
			entity.Theater = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AirOutput")]
	public partial class AirOutput
	{
		
		private string _movName;
		
		private string _theName;
		
		private System.DateTime _airTime;
		
		public AirOutput()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_movName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string movName
		{
			get
			{
				return this._movName;
			}
			set
			{
				if ((this._movName != value))
				{
					this._movName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_theName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string theName
		{
			get
			{
				return this._theName;
			}
			set
			{
				if ((this._theName != value))
				{
					this._theName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_airTime", DbType="DateTime NOT NULL")]
		public System.DateTime airTime
		{
			get
			{
				return this._airTime;
			}
			set
			{
				if ((this._airTime != value))
				{
					this._airTime = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
